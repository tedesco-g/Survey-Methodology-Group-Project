#important libraries
library(haven)
library(tidyverse)
library(naniar)
library(visdat)
library(mice)
library(GGally)
library(corrplot)
library(randomForest)
library(ggcorrplot)
library(reshape2)
library(readr)
library(caret)
#important libraries
library(haven)
library(tidyverse)
library(naniar)
library(visdat)
library(mice)
library(GGally)
library(corrplot)
library(randomForest)
library(ggcorrplot)
library(reshape2)
library(readr)
library(caret)
data <- read_dta("ZA7575.dta")
edueco_data <- read_csv("UNESCO Edu Country Data 2019/edueco_data.csv")
trans_health_data <-read.csv("trans_health_data.csv")
ilga_data <-  read_csv("ilga_data.csv")
data_clean<- data %>%
mutate(across(where(is.labelled), as.numeric))
data_clean <- data_clean |>
select(where(is.numeric))|>
select(-c(edition,studyno1, studyno2,survey, caseid, uniqid))
total_missing <- sum(is.na(data_clean))
cat("Total Missing:", total_missing, "\n")
missing_per_column <- colSums(is.na(data_clean))
missing_df <- data.frame(Variable = names(missing_per_column),
Missing_Count = missing_per_column,
Missing_Percentage = (missing_per_column / nrow(data)) * 100)
missing_df <- missing_df[order(-missing_df$Missing_Percentage), ]
print(missing_df)
high_missing <- missing_df[missing_df$Missing_Percentage > 50, ]
print(high_missing)
high_missing_vars <- names(missing_per_column[missing_per_column >50])
data_clean <- data_clean[, !(names(data_clean) %in% high_missing_vars)]
constant_vars <- names(Filter(function(x) length(unique(x)) == 1, data_clean))
data_clean <- data_clean[, !(names(data_clean) %in% constant_vars)]
numeric_data <- data_clean[, sapply(data_clean, is.numeric)]
# Identify constant columns (standard deviation = 0)
zero_sd_vars <- sapply(numeric_data, function(x) sd(x, na.rm = TRUE) == 0)
# Remove constant columns
numeric_data <- numeric_data[, !zero_sd_vars]
# Compute the correlation matrix
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs")
high_cor <- findCorrelation(cor_matrix, cutoff = 0.90)
filtered_data <- numeric_data[, -high_cor]
# List of different imputation methods to test
method_list <- c("pmm", "rf", "cart")
# Store the imputed datasets
imputed_datasets <- list()
for (method in method_list) {
cat("\nRunning:", method, "...\n")
# Perform imputation using the selected method
imputed_datasets[[method]] <- mice(data_clean, method = method, m = 3, maxit = 3, seed = 123)
}
data_comparison <- data.frame(
Original = as.numeric(numeric_data[["qc19"]]),  # Original before imputation
PMM = as.numeric(complete(imputed_datasets[["pmm"]])[["qc19"]]),
RF = as.numeric(complete(imputed_datasets[["rf"]])[["qc19"]]),
CART = as.numeric(complete(imputed_datasets[["cart"]])[["qc19"]])
)
plot_data <- melt(data_comparison,
variable.name = "Method", value.name = "qc19_values")
# Plot
ggplot(plot_data, aes(x = qc19_values, fill = Method)) +
geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
facet_wrap(~Method, scales = "free_y") +  # Separate plots for each method
labs(title = "Comparison of Imputation Methods",
x = "qc19 Values", y = "Frequency") +
theme_minimal()
data <- data %>%
mutate(qc19 = as_factor(qc19),
gender = as_factor(d10))
qc19_country_gender_dist <- data%>%
group_by(isocntry, gender, qc19) %>%
summarise(count = n(), .groups = 'drop')
ggplot(qc19_country_gender_dist, aes(x = qc19, y = count, fill = gender)) +
geom_col(position = "dodge", width = 0.7) +  # Dodge to separate gender groups
facet_wrap(~isocntry, scales = "fixed") +  # Fix the y-axis across all countries
scale_fill_manual(values = c("Man" = "#3C8BFA", "Woman" = "#663CFA")) +  # Gender colors
scale_y_continuous(limits = c(0, 400), oob = scales::squish) +  # Set y-axis range and clip outside values
labs(title = "Distribution of qc19 Responses by Country and Gender",
x = "Response Type", y = "Response Count", fill = "Gender") +
theme_minimal(base_size = 10) +
theme(
axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
legend.position = "bottom",
legend.text = element_text(size = 8),
legend.title = element_text(size = 9, face = "bold"),
legend.key.size = unit(0.4, "cm"),
panel.grid.major.x = element_blank(),
strip.text = element_text(size = 8, face = "bold"),
strip.background = element_rect(fill = "gray90", color = "black"),
panel.spacing = unit(1, "lines")
)
ggplot(qc19_country_gender_dist, aes(x = gender, y = count, fill = gender)) +
geom_boxplot() +
facet_wrap(~qc19) +
scale_fill_manual(values = c("Man" = "#3C8BFA", "Woman" = "#663CFA")) +
labs(title = "Distribution of qc19 Responses by Gender",
x = "Gender", y = "Response Count") +
theme_minimal(base_size = 14) +
theme(legend.position = "none")
data$isocntry <- reorder(data$isocntry, as.numeric(data$qc19), mean)  # Order by mean qc19 response
ggplot(data, aes(x = isocntry, y = as.numeric(qc19))) +
geom_violin(width = 0.9, fill = "lightblue", color = "black") +  # Make violins wider
geom_boxplot(width = 0.2, outlier.shape = NA) +  # Add boxplot overlay
stat_summary(fun = mean, geom = "point", color = "red", size = 2) +  # Highlight means
scale_y_continuous(breaks = c(1, 2, 3), labels = c("Yes", "No", "DK")) +
labs(title = "Distribution of qc19 Responses by Country (Ordered by Mean)",
x = "Country", y = "qc19 Response Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Adjust font size
plot.title = element_text(size = 14, face = "bold")) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Step 1:  relevant columns from filtered_data
selected_data <- filtered_data |>
select(c(
"serialid", "d70", "d71_1", "d71_2", "d71_3", "d72_1", "d72_2", "polintr", "d10", "d25", "d1", "d63", "sd2_1", "sd2_2", "sd2_3", "sd2_4", "sd2_5", "sd2_6", "sd2_7", "sd3", "qc1_4", "qc1_8", "qc1_10", "d8r1", "d8r2", "d8", "qc19"))
# Step 2: relevant columns from `data`
country_data <- data |>
select("serialid", "isocntry", "qc17_4", "qc17_3", "qc17_5")
colnames(trans_health_data) <- tolower(colnames(trans_health_data))
colnames(ilga_data) <- tolower(colnames(ilga_data))
edueco_data <- edueco_data |>
inner_join(trans_health_data, by= "country")
edueco_data <- edueco_data |>
inner_join(ilga_data, by= "country")
# Step 3: Merge country_data with edueco_data based on country codes
country_data <- country_data %>%
inner_join(edueco_data, by = c("isocntry" = "iso2c"))
# Step 4: Merge selected_data with country_data using "serialid" as the key
merged_data <- selected_data %>%
inner_join(country_data, by = "serialid")
merged_data <- merged_data |> rename(
lifesat = d70,
natmat = d71_1,
eumat = d71_2,
locmat = d71_3,
euvoice = d72_1,
natvoice = d72_2,
gender = d10,
community = d25,
ideo = d1,
class = d63,
ethnic = sd2_1,
skin = sd2_2,
relig = sd2_3,
roma = sd2_4,
sex = sd2_5,
disab = sd2_6,
other = sd2_7,
religion = sd3,
sexdiscr = qc1_4,
transdiscr = qc1_8,
interdiscr = qc1_10,
transgender_civil_dc = qc19,
gdp = `NY.GDP.MKTP.CD`,
edu_exp_pct = `SE.XPD.TOTL.GD.ZS`,
preprim_exp = `PrePrimary (XSPENDP.02.FDPUB.FNCUR)`,
prim_exp = `Primary (XSPENDP.1.FDPUB.FNCUR)`,
lose_exp = `LowerSecondary (XSPENDP.2.FDPUB.FNCUR)`,
upse_exp = `UpperSecondary (XSPENDP.2T3.FDPUB.FNCUR)`,
ter_exp = `Tertiary (XSPENDP.3.FDPUB.FNCUR)`,
voc_exp = `VocationalTraining (XSPENDP.4.FDPUB.FNCUR)`,
school_div_sexual_orientation = qc17_3,
school_div_transgender = qc17_4,
school_div_intersex= qc17_5,
age_edu = d8,
age_edu_5cat = d8r1,
age_edu_11cat = d8r2,
`no legal framework making legal gender recognition impossible` = nolger,
`existence of legal measures` = exist_lgme,
`existence of administrative procedures` = exist_adm,
`name change` = name_change,
`no age restriction, name change` = nar_name_change,
`self-determination` = self_det,
`non-binary recognition` = nb_recog,
`no 'gender identity disorder' diagnosis/psychological opinion required` = psych_diag,
`no compulsory medical intervention required` = med_interven,
`no compulsory surgical intervention required` = surg_interven,
`no compulsory sterilisation required` = steril_req,
`no compulsory divorce required` = div_req,
`no age restriction` = age_restrict,
`legal gender recognition procedures exist for minors` = lgrp_minors,
`depathologisation` = depath
)
merged_data <- merged_data |> rename(
lifesat = d70,
natmat = d71_1,
eumat = d71_2,
locmat = d71_3,
euvoice = d72_1,
natvoice = d72_2,
gender = d10,
community = d25,
ideo = d1,
class = d63,
ethnic = sd2_1,
skin = sd2_2,
relig = sd2_3,
roma = sd2_4,
sex = sd2_5,
disab = sd2_6,
other = sd2_7,
religion = sd3,
sexdiscr = qc1_4,
transdiscr = qc1_8,
interdiscr = qc1_10,
transgender_civil_dc = qc19,
gdp = `NY.GDP.MKTP.CD`,
edu_exp_pct = `SE.XPD.TOTL.GD.ZS`,
preprim_exp = `PrePrimary (XSPENDP.02.FDPUB.FNCUR)`,
prim_exp = `Primary (XSPENDP.1.FDPUB.FNCUR)`,
lose_exp = `LowerSecondary (XSPENDP.2.FDPUB.FNCUR)`,
upse_exp = `UpperSecondary (XSPENDP.2T3.FDPUB.FNCUR)`,
ter_exp = `Tertiary (XSPENDP.3.FDPUB.FNCUR)`,
voc_exp = `VocationalTraining (XSPENDP.4.FDPUB.FNCUR)`,
school_div_sexual_orientation = qc17_3,
school_div_transgender = qc17_4,
school_div_intersex= qc17_5,
age_edu = d8,
age_edu_5cat = d8r1,
age_edu_11cat = d8r2,
nolger = `no legal framework making legal gender recognition impossible`,
exist_lgme = `existence of legal measures`,
exist_adm = `existence of administrative procedures`,
name_change = `name change`,
nar_name_change = `no age restriction, name change`,
self_det = `self-determination`,
nb_recog = `non-binary recognition`,
psych_diag = `no 'gender identity disorder' diagnosis/psychological opinion required`,
med_interven = `no compulsory medical intervention required`,
surg_interven = `no compulsory surgical intervention required`,
steril_req = `no compulsory sterilisation required`,
div_req = `no compulsory divorce required`,
age_restrict = `no age restriction`,
lgrp_minors = `legal gender recognition procedures exist for minors`,
depath = `depathologisation`
)
merged_data<- merged_data |>
select(-c(x, isocntry, ...1))
merged_data <- merged_data |> select(country, iso3c, everything())
write.csv(merged_data, "final_data.csv", col.names = TRUE)
