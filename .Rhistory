iso3c = c("BEL", "DNK", "GRC", "ESP", "FIN", "FRA", "IRL", "ITA", "LUX", "NLD",
"AUT", "PRT", "SWE", "BGR", "CYP", "CZE", "EST", "HUN", "LVA", "LTU",
"MLT", "POL", "ROU", "SVN", "HRV", "DEU") # ISO-3 Codes
)
percentage <- final_data %>%
group_by(iso3c) |>
count(transgender_civil_dc) %>%  # Count occurrences of each unique value
mutate(percentage = (n / sum(n)) * 100)
percentage <- percentage%>%
left_join(country_codes, by = "iso3c")
# Aggregate data and handle missing values
aggregated_data <- percentage %>%
group_by(iso3c) %>%
summarise(
tooltip_text = paste0(
"<b>Yes:</b> ", ifelse(any(transgender_civil_dc == 1),
round(percentage[transgender_civil_dc == 1], 1), "0"), "%<br>",
"<b>No:</b> ", ifelse(any(transgender_civil_dc == 2),
round(percentage[transgender_civil_dc == 2], 1), "0"), "%<br>",
"<b>DK:</b> ", ifelse(any(transgender_civil_dc == 3),
round(percentage[transgender_civil_dc == 3], 1), "0"), "%"
),
dominant_dc = transgender_civil_dc[which.max(percentage)] # Get dominant category
) %>%
ungroup()
hcmap("custom/europe",
data = aggregated_data,
name = "Transgender Civil DC Levels",
joinBy = c("iso-a3", "iso3c"),  # Ensure correct mapping
value = "dominant_dc",  # Color based on dominant category
dataLabels = list(enabled = TRUE, format = '{point.name}'),
borderColor = "#ffffff") %>%
hc_colorAxis(dataClasses = list(
list(from = 1, to = 1, color = "#007bff", name = "Yes"),      # Blue for Yes
list(from = 2, to = 2, color = "#ffd700", name = "No"),      # Yellow for No
list(from = 3, to = 3, color = "#4caf50", name = "DK")       # Green for DK
)) %>%
hc_tooltip(
useHTML = TRUE,
headerFormat = "<span style='font-size:16px; font-weight:bold'>{point.name}</span><br>",
pointFormat = "<div style='width:260px; font-size:14px; line-height:1.5'>{point.tooltip_text}</div>",
borderWidth = 2,
borderColor = "#333",
backgroundColor = "rgba(255, 255, 255, 0.95)",
style = list(fontSize = "14px", padding = "12px")
) %>%
hc_chart(
width = 550,  # Increase width for a broader view
height = 550,
map= list(
zoom = 0.3,  # Daha uzak bir görünüm sağlar
center = list(latitude = 50, longitude = 10)  # Avrupa'nın merkezine odaklanır
)
) %>%
hc_mapNavigation(
enabled = TRUE,  # Allow zooming manually
enableButtons = TRUE,  # Enable zoom control buttons
enableMouseWheelZoom = FALSE  # Disable automatic mouse zoom for better control
) %>%
hc_title(text = "Transgender Civil DC Support Levels in Europe")
unique(final_data$iso3c)
unique(final_data$country)
rm(list = ls())
library(haven)
library(tidyverse)
library(naniar)
library(visdat)
library(mice)
library(GGally)
library(corrplot)
library(ggcorrplot)
library(reshape2)
library(readr)
library(caret)
library(dplyr)
library(ggplot2)
library(viridis)
library(MASS)
library(lme4)
library(sjPlot)
library(tidyr)
library(patchwork)
library(car)
library(nnet)
library(highcharter)
library(scales)
library(rpart)
library(randomForest)
library(pROC)
library(xgboost)
library(gbm)
library(MLmetrics)
library(smotefamily)
library(fastDummies)
data <- read_dta("data_cleaning_files/ZA7575.dta")
edueco_data <- read_csv("data_cleaning_files/UNESCO Edu Country Data 2019/edueco_data.csv")
trans_health_data <-read.csv("data_cleaning_files/trans_health_data.csv")
ilga_data <-  read_csv("data_cleaning_files/ilga_data.csv")
data_clean<- data %>%
mutate(across(where(is.labelled), as.numeric))
data_clean <- data_clean |>
dplyr::select(where(is.numeric))|>
dplyr::select(-c(edition,studyno1, studyno2,survey, caseid, uniqid))
total_missing <- sum(is.na(data_clean))
cat("Total Missing:", total_missing, "\n")
missing_per_column <- colSums(is.na(data_clean))
missing_df <- data.frame(Variable = names(missing_per_column),
Missing_Count = missing_per_column,
Missing_Percentage = (missing_per_column / nrow(data)) * 100)
missing_df <- missing_df[order(-missing_df$Missing_Percentage), ]
high_missing <- missing_df[missing_df$Missing_Percentage > 50, ]
high_missing_vars <- names(missing_per_column[missing_per_column >50])
data_clean <- data_clean[, !(names(data_clean) %in% high_missing_vars)]
constant_vars <- names(Filter(function(x) length(unique(x)) == 1, data_clean))
data_clean <- data_clean[, !(names(data_clean) %in% constant_vars)]
numeric_data <- data_clean[, sapply(data_clean, is.numeric)]
# Identify constant columns (standard deviation = 0)
zero_sd_vars <- sapply(numeric_data, function(x) sd(x, na.rm = TRUE) == 0)
# Remove constant columns
numeric_data <- numeric_data[, !zero_sd_vars]
# Compute the correlation matrix
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs")
high_cor <- findCorrelation(cor_matrix, cutoff = 0.90)
filtered_data <- numeric_data[, -high_cor]
# List of different imputation methods to test
method_list <- c("pmm", "rf", "cart")
# Store the imputed datasets
imputed_datasets <- list()
for (method in method_list) {
cat("\nRunning:", method, "...\n")
# Perform imputation using the selected method
imputed_datasets[[method]] <- mice(data_clean, method = method, m = 3, maxit = 3, seed = 123)
}
data_comparison <- data.frame(
Original = as.numeric(numeric_data[["qc19"]]),  # Original before imputation
PMM = as.numeric(complete(imputed_datasets[["pmm"]])[["qc19"]]),
RF = as.numeric(complete(imputed_datasets[["rf"]])[["qc19"]]),
CART = as.numeric(complete(imputed_datasets[["cart"]])[["qc19"]])
)
plot_data <- melt(data_comparison,
variable.name = "Method", value.name = "qc19_values")
plot_data <- melt(data_comparison,
variable.name = "Method", value.name = "qc19_values")
# Plot
ggplot(plot_data, aes(x = qc19_values, fill = Method)) +
geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
facet_wrap(~Method, scales = "free_y") +  # Separate plots for each method
labs(title = "Comparison of Imputation Methods",
x = "qc19 Values", y = "Frequency") +
theme_minimal()
# Step 1:  relevant columns from filtered_data
selected_data <- filtered_data |>
dplyr::select(c(
"serialid", "d70", "d71_1", "d71_2", "d71_3", "d72_1", "d72_2", "polintr", "d10", "d25", "d1", "d63", "sd2_1", "sd2_2", "sd2_3", "sd2_4", "sd2_5", "sd2_6", "sd2_7", "sd3", "qc1_4", "qc1_8", "qc1_10", "d8r1", "d8r2", "d8", "qc19"))
# Step 2: relevant columns from `data`
country_data <- data |>
dplyr::select("serialid", "isocntry", "qc17_4", "qc17_3", "qc17_5")
country_data <- country_data %>%
mutate(isocntry = case_when(
isocntry == "DE-W" ~ "DE",
isocntry == "DE-E" ~ "De",
TRUE ~ isocntry
))
colnames(trans_health_data) <- tolower(colnames(trans_health_data))
colnames(ilga_data) <- tolower(colnames(ilga_data))
edueco_data <- edueco_data |>
inner_join(trans_health_data, by= "country")
edueco_data <- edueco_data |>
inner_join(ilga_data, by= "country")
# Step 3: Merge country_data with edueco_data based on country codes
country_data <- country_data %>%
inner_join(edueco_data, by = c("isocntry" = "iso2c"))
# Step 4: Merge selected_data with country_data using "serialid" as the key
merged_data <- selected_data %>%
inner_join(country_data, by = "serialid")
merged_data <- merged_data |> rename(
lifesat = d70,
natmat = d71_1,
eumat = d71_2,
locmat = d71_3,
euvoice = d72_1,
natvoice = d72_2,
gender = d10,
community = d25,
ideo = d1,
class = d63,
ethnic = sd2_1,
skin = sd2_2,
relig = sd2_3,
roma = sd2_4,
sex = sd2_5,
disab = sd2_6,
other = sd2_7,
religion = sd3,
sexdiscr = qc1_4,
transdiscr = qc1_8,
interdiscr = qc1_10,
transgender_civil_dc = qc19,
gdp = `NY.GDP.MKTP.CD`,
edu_exp_pct = `SE.XPD.TOTL.GD.ZS`,
preprim_exp = `PrePrimary (XSPENDP.02.FDPUB.FNCUR)`,
prim_exp = `Primary (XSPENDP.1.FDPUB.FNCUR)`,
lose_exp = `LowerSecondary (XSPENDP.2.FDPUB.FNCUR)`,
upse_exp = `UpperSecondary (XSPENDP.2T3.FDPUB.FNCUR)`,
ter_exp = `Tertiary (XSPENDP.3.FDPUB.FNCUR)`,
voc_exp = `VocationalTraining (XSPENDP.4.FDPUB.FNCUR)`,
school_div_sexual_orientation = qc17_3,
school_div_transgender = qc17_4,
school_div_intersex= qc17_5,
age_edu = d8,
age_edu_5cat = d8r1,
age_edu_11cat = d8r2,
nolger = `no legal framework making legal gender recognition impossible`,
exist_lgme = `existence of legal measures`,
exist_adm = `existence of administrative procedures`,
name_change = `name change`,
nar_name_change = `no age restriction, name change`,
self_det = `self-determination`,
nb_recog = `non-binary recognition`,
psych_diag = `no 'gender identity disorder' diagnosis/psychological opinion required`,
med_interven = `no compulsory medical intervention required`,
surg_interven = `no compulsory surgical intervention required`,
steril_req = `no compulsory sterilisation required`,
div_req = `no compulsory divorce required`,
age_restrict = `no age restriction`,
lgrp_minors = `legal gender recognition procedures exist for minors`,
depath = `depathologisation`)
merged_data<- merged_data |>
dplyr::select(-c(x, isocntry, ...1))
merged_data <- merged_data |> dplyr::select(country, iso3c, everything())
write.csv(merged_data, "final_data.csv", col.names = TRUE)
unique(merged_data$iso3c)
rm(list = ls())
library(haven)
library(tidyverse)
library(naniar)
library(visdat)
library(mice)
library(GGally)
library(corrplot)
library(ggcorrplot)
library(reshape2)
library(readr)
library(caret)
library(dplyr)
library(ggplot2)
library(viridis)
library(MASS)
library(lme4)
library(sjPlot)
library(tidyr)
library(patchwork)
library(car)
library(nnet)
library(highcharter)
library(scales)
library(rpart)
library(randomForest)
library(pROC)
library(xgboost)
library(gbm)
library(MLmetrics)
library(smotefamily)
library(fastDummies)
data <- read_dta("data_cleaning_files/ZA7575.dta")
edueco_data <- read_csv("data_cleaning_files/UNESCO Edu Country Data 2019/edueco_data.csv")
trans_health_data <-read.csv("data_cleaning_files/trans_health_data.csv")
ilga_data <-  read_csv("data_cleaning_files/ilga_data.csv")
data_clean<- data %>%
mutate(across(where(is.labelled), as.numeric))
data_clean <- data_clean |>
dplyr::select(where(is.numeric))|>
dplyr::select(-c(edition,studyno1, studyno2,survey, caseid, uniqid))
total_missing <- sum(is.na(data_clean))
cat("Total Missing:", total_missing, "\n")
missing_per_column <- colSums(is.na(data_clean))
missing_df <- data.frame(Variable = names(missing_per_column),
Missing_Count = missing_per_column,
Missing_Percentage = (missing_per_column / nrow(data)) * 100)
missing_df <- missing_df[order(-missing_df$Missing_Percentage), ]
high_missing <- missing_df[missing_df$Missing_Percentage > 50, ]
high_missing_vars <- names(missing_per_column[missing_per_column >50])
data_clean <- data_clean[, !(names(data_clean) %in% high_missing_vars)]
constant_vars <- names(Filter(function(x) length(unique(x)) == 1, data_clean))
data_clean <- data_clean[, !(names(data_clean) %in% constant_vars)]
numeric_data <- data_clean[, sapply(data_clean, is.numeric)]
# Identify constant columns (standard deviation = 0)
zero_sd_vars <- sapply(numeric_data, function(x) sd(x, na.rm = TRUE) == 0)
# Remove constant columns
numeric_data <- numeric_data[, !zero_sd_vars]
# Compute the correlation matrix
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs")
high_cor <- findCorrelation(cor_matrix, cutoff = 0.90)
filtered_data <- numeric_data[, -high_cor]
# List of different imputation methods to test
method_list <- c("pmm", "rf", "cart")
# Store the imputed datasets
imputed_datasets <- list()
for (method in method_list) {
cat("\nRunning:", method, "...\n")
# Perform imputation using the selected method
imputed_datasets[[method]] <- mice(data_clean, method = method, m = 3, maxit = 3, seed = 123)
}
data_comparison <- data.frame(
Original = as.numeric(numeric_data[["qc19"]]),  # Original before imputation
PMM = as.numeric(complete(imputed_datasets[["pmm"]])[["qc19"]]),
RF = as.numeric(complete(imputed_datasets[["rf"]])[["qc19"]]),
CART = as.numeric(complete(imputed_datasets[["cart"]])[["qc19"]])
)
plot_data <- melt(data_comparison,
variable.name = "Method", value.name = "qc19_values")
# Plot
ggplot(plot_data, aes(x = qc19_values, fill = Method)) +
geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
facet_wrap(~Method, scales = "free_y") +  # Separate plots for each method
labs(title = "Comparison of Imputation Methods",
x = "qc19 Values", y = "Frequency") +
theme_minimal()
# Step 1:  relevant columns from filtered_data
selected_data <- filtered_data |>
dplyr::select(c(
"serialid", "d70", "d71_1", "d71_2", "d71_3", "d72_1", "d72_2", "polintr", "d10", "d25", "d1", "d63", "sd2_1", "sd2_2", "sd2_3", "sd2_4", "sd2_5", "sd2_6", "sd2_7", "sd3", "qc1_4", "qc1_8", "qc1_10", "d8r1", "d8r2", "d8", "qc19"))
# Step 2: relevant columns from `data`
country_data <- data |>
dplyr::select("serialid", "isocntry", "qc17_4", "qc17_3", "qc17_5")
View(country_data)
unique(country_data$isocntry)
country_data <- country_data %>%
mutate(isocntry = case_when(
isocntry == "DE-W" ~ "DE",
isocntry == "DE-E" ~ "De",
TRUE ~ isocntry
))
unique(country_data$isocntry)
country_data <- country_data %>%
mutate(isocntry = case_when(
isocntry == "DE-W" ~ "DE",
isocntry == "DE-E" ~ "DE",
TRUE ~ isocntry
))
unique(country_data$isocntry)
rm(list = ls())
library(haven)
library(tidyverse)
library(naniar)
library(visdat)
library(mice)
library(GGally)
library(corrplot)
library(ggcorrplot)
library(reshape2)
library(readr)
library(caret)
library(dplyr)
library(ggplot2)
library(viridis)
library(MASS)
library(lme4)
library(sjPlot)
library(tidyr)
library(patchwork)
library(car)
library(nnet)
library(highcharter)
library(scales)
library(rpart)
library(randomForest)
library(pROC)
library(xgboost)
library(gbm)
library(MLmetrics)
library(smotefamily)
library(fastDummies)
data <- read_dta("data_cleaning_files/ZA7575.dta")
edueco_data <- read_csv("data_cleaning_files/UNESCO Edu Country Data 2019/edueco_data.csv")
trans_health_data <-read.csv("data_cleaning_files/trans_health_data.csv")
ilga_data <-  read_csv("data_cleaning_files/ilga_data.csv")
data_clean<- data %>%
mutate(across(where(is.labelled), as.numeric))
data_clean <- data_clean |>
dplyr::select(where(is.numeric))|>
dplyr::select(-c(edition,studyno1, studyno2,survey, caseid, uniqid))
total_missing <- sum(is.na(data_clean))
cat("Total Missing:", total_missing, "\n")
missing_per_column <- colSums(is.na(data_clean))
missing_df <- data.frame(Variable = names(missing_per_column),
Missing_Count = missing_per_column,
Missing_Percentage = (missing_per_column / nrow(data)) * 100)
missing_df <- missing_df[order(-missing_df$Missing_Percentage), ]
high_missing <- missing_df[missing_df$Missing_Percentage > 50, ]
high_missing_vars <- names(missing_per_column[missing_per_column >50])
data_clean <- data_clean[, !(names(data_clean) %in% high_missing_vars)]
constant_vars <- names(Filter(function(x) length(unique(x)) == 1, data_clean))
data_clean <- data_clean[, !(names(data_clean) %in% constant_vars)]
numeric_data <- data_clean[, sapply(data_clean, is.numeric)]
# Identify constant columns (standard deviation = 0)
zero_sd_vars <- sapply(numeric_data, function(x) sd(x, na.rm = TRUE) == 0)
# Remove constant columns
numeric_data <- numeric_data[, !zero_sd_vars]
# Compute the correlation matrix
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs")
high_cor <- findCorrelation(cor_matrix, cutoff = 0.90)
filtered_data <- numeric_data[, -high_cor]
# List of different imputation methods to test
method_list <- c("pmm", "rf", "cart")
# Store the imputed datasets
imputed_datasets <- list()
for (method in method_list) {
cat("\nRunning:", method, "...\n")
# Perform imputation using the selected method
imputed_datasets[[method]] <- mice(data_clean, method = method, m = 3, maxit = 3, seed = 123)
}
data_comparison <- data.frame(
Original = as.numeric(numeric_data[["qc19"]]),  # Original before imputation
PMM = as.numeric(complete(imputed_datasets[["pmm"]])[["qc19"]]),
RF = as.numeric(complete(imputed_datasets[["rf"]])[["qc19"]]),
CART = as.numeric(complete(imputed_datasets[["cart"]])[["qc19"]])
)
plot_data <- melt(data_comparison,
variable.name = "Method", value.name = "qc19_values")
# Plot
ggplot(plot_data, aes(x = qc19_values, fill = Method)) +
geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
facet_wrap(~Method, scales = "free_y") +  # Separate plots for each method
labs(title = "Comparison of Imputation Methods",
x = "qc19 Values", y = "Frequency") +
theme_minimal()
# Step 1:  relevant columns from filtered_data
selected_data <- filtered_data |>
dplyr::select(c(
"serialid", "d70", "d71_1", "d71_2", "d71_3", "d72_1", "d72_2", "polintr", "d10", "d25", "d1", "d63", "sd2_1", "sd2_2", "sd2_3", "sd2_4", "sd2_5", "sd2_6", "sd2_7", "sd3", "qc1_4", "qc1_8", "qc1_10", "d8r1", "d8r2", "d8", "qc19"))
# Step 2: relevant columns from `data`
country_data <- data |>
dplyr::select("serialid", "isocntry", "qc17_4", "qc17_3", "qc17_5")
country_data <- country_data %>%
mutate(isocntry = case_when(
isocntry == "DE-W" ~ "DE",
isocntry == "DE-E" ~ "DE",
TRUE ~ isocntry
))
colnames(trans_health_data) <- tolower(colnames(trans_health_data))
colnames(ilga_data) <- tolower(colnames(ilga_data))
edueco_data <- edueco_data |>
inner_join(trans_health_data, by= "country")
edueco_data <- edueco_data |>
inner_join(ilga_data, by= "country")
unique(country_data$isocntry)
colnames(ilga_data) <- tolower(colnames(ilga_data))
edueco_data <- edueco_data |>
inner_join(trans_health_data, by= "country")
edueco_data <- edueco_data |>
inner_join(ilga_data, by= "country")
# Step 3: Merge country_data with edueco_data based on country codes
country_data <- country_data %>%
inner_join(edueco_data, by = c("isocntry" = "iso2c"))
unique(country_data$isocntry)
# Step 4: Merge selected_data with country_data using "serialid" as the key
merged_data <- selected_data %>%
inner_join(country_data, by = "serialid")
unique(country_data$isocntry)
merged_data <- merged_data |> rename(
lifesat = d70,
natmat = d71_1,
eumat = d71_2,
locmat = d71_3,
euvoice = d72_1,
natvoice = d72_2,
gender = d10,
community = d25,
ideo = d1,
class = d63,
ethnic = sd2_1,
skin = sd2_2,
relig = sd2_3,
roma = sd2_4,
sex = sd2_5,
disab = sd2_6,
other = sd2_7,
religion = sd3,
sexdiscr = qc1_4,
transdiscr = qc1_8,
interdiscr = qc1_10,
transgender_civil_dc = qc19,
gdp = `NY.GDP.MKTP.CD`,
edu_exp_pct = `SE.XPD.TOTL.GD.ZS`,
preprim_exp = `PrePrimary (XSPENDP.02.FDPUB.FNCUR)`,
prim_exp = `Primary (XSPENDP.1.FDPUB.FNCUR)`,
lose_exp = `LowerSecondary (XSPENDP.2.FDPUB.FNCUR)`,
upse_exp = `UpperSecondary (XSPENDP.2T3.FDPUB.FNCUR)`,
ter_exp = `Tertiary (XSPENDP.3.FDPUB.FNCUR)`,
voc_exp = `VocationalTraining (XSPENDP.4.FDPUB.FNCUR)`,
school_div_sexual_orientation = qc17_3,
school_div_transgender = qc17_4,
school_div_intersex= qc17_5,
age_edu = d8,
age_edu_5cat = d8r1,
age_edu_11cat = d8r2,
nolger = `no legal framework making legal gender recognition impossible`,
exist_lgme = `existence of legal measures`,
exist_adm = `existence of administrative procedures`,
name_change = `name change`,
nar_name_change = `no age restriction, name change`,
self_det = `self-determination`,
nb_recog = `non-binary recognition`,
psych_diag = `no 'gender identity disorder' diagnosis/psychological opinion required`,
med_interven = `no compulsory medical intervention required`,
surg_interven = `no compulsory surgical intervention required`,
steril_req = `no compulsory sterilisation required`,
div_req = `no compulsory divorce required`,
age_restrict = `no age restriction`,
lgrp_minors = `legal gender recognition procedures exist for minors`,
depath = `depathologisation`)
