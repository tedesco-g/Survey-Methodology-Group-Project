---
title: "Survey Methodology Presentation"
author: "Gina, Ekin, Aurora"
format: revealjs
editor: visual
---

## Introduction
**The purpose of the project**

★ Factors influencing public support for transgender rights across Europe

★ Both individual-level factors (such as demographics, religion, and ideology), and country-level variables, (including GDP, legal frameworks, and policy environments).

★ The role of education and healthcare in shaping public attitudes → predictive model that can forecast support levels across different countries

```{r, echo=FALSE, message=FALSE, warning=FALSE}
library(haven)
library(tidyverse)
library(naniar)
library(visdat)
library(mice)
library(GGally)
library(corrplot)
library(ggcorrplot)
library(reshape2)
library(readr)
library(caret)
library(dplyr)
library(ggplot2)
library(viridis)
library(MASS)
library(lme4)
library(sjPlot)
library(tidyr)
library(patchwork)
library(car)
library(nnet)
library(highcharter)
library(scales)
library(rpart)
library(randomForest)
library(pROC)
library(xgboost)
library(gbm)
library(MLmetrics)
library(smotefamily)
library(fastDummies)
library(tidyverse)
library(dplyr)
library(highcharter)
library(ggplot2)    
library(readr)      
library(tidyr)

```

------------------------------------------------------------------------

## Data Handling

**Data Sources**

-   *Special Eurobarometer 493* – (Public opinion data at the individual level)

-   *UNESCO Edu Country Data 2019* – (Country-level education & economic indicators)

-   *Trans Health Data*

-   *ILGA Data*

---

### First Imputation 

![](images/clipboard-4112000975.png)

------------------------------------------------------------------------

### Second Imputation

![](images/clipboard-1135736898.png)

---

![](images/clipboard-2955755552.png)

------------------------------------------------------------------------

## Descriptive Analysis
### Individual-Level

★ Educational Attainment

★ Gender and Regional Differences

  ☆ Responses to key questions, such as Question 19

★ Attitudes Toward Diversity Education

```{r, include = FALSE}
final_data <-read_csv("data_cleaning_files/final_data.csv")

final_data<- final_data[, -1]

# Ensure final_data is a data frame
final_data <- as.data.frame(final_data)

# only variables with missing data for imputation
impute_vars <- final_data %>% dplyr::select(`preprim_exp`, `prim_exp`, `lose_exp`, `upse_exp`, `voc_exp`)

# Generate a predictor matrix
predictorMatrix <- make.predictorMatrix(impute_vars)

imputed_data <- mice(impute_vars, method = "mean", m = 5, maxit = 10, seed = 123)

# Replace missing values with the first imputed dataset
final_data <- final_data %>%
  mutate(
    preprim_exp = complete(imputed_data, 1)$preprim_exp,
    prim_exp = complete(imputed_data, 1)$prim_exp,
    lose_exp = complete(imputed_data, 1)$lose_exp,
    upse_exp = complete(imputed_data, 1)$upse_exp,
    voc_exp = complete(imputed_data, 1)$voc_exp
  )

# Check if imputation worked correctly
summary(final_data$voc_exp)

```

```{r, include = FALSE}
# Load necessary library
final_data <- read_csv("final_data.csv")

#  only individual-level variables
individual_vars <- final_data %>%
  dplyr::select(gender, age_edu_5cat, age_edu_11cat, polintr, natvoice, euvoice, relig, 
         roma, skin, sexdiscr, transdiscr, school_div_transgender, 
         school_div_sexual_orientation, school_div_intersex, transgender_civil_dc)

# Function to Categorize Variables
categorize_variables <- function(var_name) {
  if (var_name %in% c("age_edu_5cat", "age_edu_11cat", "skin")) {
    return("Demographics")
  } else if (var_name %in% c("school_div_intersex", "school_div_sexual_orientation", "school_div_transgender")) {
    return("School Should Give Information Measures")
  } else if (var_name %in% c("natvoice", "euvoice")) {
    return("Voice Representation")
  } else if (var_name %in% c("relig", "roma")) {
    return("Identity")
  } else {
    return("Other Variables")
  }
}

# Prepare Data
improved_data <- individual_vars %>%
  pivot_longer(cols = everything(), names_to = "Variable", values_to = "Value") %>%
  mutate(
    Variable_Group = sapply(Variable, categorize_variables),
    Variable_Label = case_when(
      Variable == "age_edu_5cat" ~ "Age-Education (5 cat)",
      Variable == "age_edu_11cat" ~ "Age-Education (11 cat)",
      Variable == "skin" ~ "Skin Color",
      Variable == "school_div_intersex" ~ "School Diversity (Intersex)",
      Variable == "school_div_sexual_orientation" ~ "School Diversity (Sexual Orientation)",
      Variable == "school_div_transgender" ~ "School Diversity (Transgender)",
      Variable == "natvoice" ~ "Native Voice",
      Variable == "euvoice" ~ "European Voice",
      Variable == "polintr" ~ "Political Interest",
      Variable == "relig" ~ "Religion",
      Variable == "roma" ~ "Roma Identity",
      Variable == "sexdiscr" ~ "Sexual Discrimination",
      Variable == "transdiscr" ~ "Transgender Discrimination",
      TRUE ~ Variable
    )
  )

# Function to Create Histograms
create_improved_histogram <- function(data, group_name) {
  filtered_data <- data %>% filter(Variable_Group == group_name)

  ggplot(filtered_data, aes(x = Value)) +
    geom_histogram(bins = 15, color = "white", fill = "blue", alpha = 0.9) +
    facet_wrap(~replace_na(Variable_Label, "Unknown"), scales = "free", ncol = 2) +
    labs(
      title = paste("Distribution of", group_name),
      x = "Value",
      y = "Frequency",
      caption = "Values shown as frequencies rather than percentages for better readability"
    ) +
    theme_minimal(base_size = 12) +
    theme(
      plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
      axis.title = element_text(size = 12, face = "bold"),
      axis.text.x = element_text(angle = 30, hjust = 1, size = 10),
      axis.text.y = element_text(size = 10),
      strip.text = element_text(size = 12, face = "bold"),
      strip.background = element_rect(fill = "lightgray", color = NA),
      panel.spacing = unit(1, "lines"),
      legend.position = "right",
    )
}

# Generate Histograms
demographics_plot <- create_improved_histogram(improved_data, "Demographics")
information_plot <- create_improved_histogram(improved_data, "School Should Give Information Measures")
voice_plot <- create_improved_histogram(improved_data, "Voice Representation")
identity_plot <- create_improved_histogram(improved_data, "Identity")
other_plot <- create_improved_histogram(improved_data, "Other Variables")

# Function to Create Bar Charts
create_bar_chart <- function(data, variable_name) {
  if (!variable_name %in% colnames(data)) {
    stop(paste("Error: Column", variable_name, "not found in data!"))
  }

  var_data <- data %>%
    dplyr::select(all_of(variable_name)) %>%
    rename(Value = all_of(variable_name)) %>%
    drop_na() %>%  # Remove missing values
    group_by(Value) %>%
    summarize(Count = n(), .groups = "drop") %>%
    mutate(
      Percentage = Count / sum(Count) * 100,
      Value = factor(Value)
    )

  var_label <- improved_data %>%
    filter(Variable == variable_name) %>%
    pull(Variable_Label) %>%
    unique()

  if (length(var_label) == 0) {
    var_label <- variable_name
  }

  ggplot(var_data, aes(x = Value, y = Percentage, fill = Percentage)) +
    geom_bar(stat = "identity", width = 0.7) +
    geom_text(aes(label = sprintf("%.1f%%", Percentage)), position = position_stack(vjust = 0.5), color = "black") +
    labs(title = paste("Distribution of", var_label), x = "Category", y = "Percentage (%)") +
    theme_minimal()
}

# Generate Bar Chart for Gender
if ("gender" %in% colnames(individual_vars)) {
  gender_bar <- create_bar_chart(individual_vars, "gender")
} else {
  print("Warning: The column 'gender' is missing from the dataset!")
}


```

------------------------------------------------------------------------

### School Diversity Attitude

```{r}
 information_plot

```

------------------------------------------------------------------------

### Voice Representation

```{r}
voice_plot

```

------------------------------------------------------------------------

### Identity

```{r}
identity_plot

```

------------------------------------------------------------------------

### Gender (distribution for the whole survey)

```{r}
gender_bar

```

------------------------------------------------------------------------

### Religion

```{r, echo = FALSE}
religion_labels <- c(
  "1" = "Catholic",
  "2" = "Orthodox Christian",
  "3" = "Protestant",
  "4" = "Other Christian",
  "5" = "Jewish",
  "6" = "Muslim - Shia",
  "7" = "Muslim - Sunni",
  "8" = "Other Muslim",
  "9" = "Sikh",
  "10" = "Buddhist",
  "11" = "Hindu",
  "12" = "Atheist",
  "13" = "Non believer / Agnostic",
  "14" = "Other",
  "15" = "Refusal",
  "16" = "Don't Know"
)

final_data <- final_data %>%
  filter(religion %in% names(religion_labels))

# Convert religion variable to factor with specific labels
final_data$religion1 <- factor(final_data$religion, 
                              levels = names(religion_labels), 
                              labels = religion_labels)

# Count occurrences
religion_counts <- final_data %>%
  group_by(religion1) %>%
  summarise(Count = n()) %>%
  arrange(Count)

# Calculate percentages
religion_counts <- religion_counts %>%
  mutate(Percentage = (Count / sum(Count)) * 100)

# Create bar plot
ggplot(religion_counts, aes(x = reorder(religion1, Count), y = Percentage, fill = religion1)) +
  geom_bar(stat = "identity", width = 0.7) +
  coord_flip()+
  labs(
    title = "Distribution of Religions",
    x = "Religion",
    y = "Percentage (%)",
    fill = "Religion"
  ) +
  theme_minimal() +
  theme(
    plot.title = element_text(size = 16, face = "bold", hjust = 0.5),
    axis.text.x = element_text(size = 10, angle = 45, hjust = 1),
    axis.title = element_text(size = 14, face = "bold"),
    legend.position = "none"
  )

```

------------------------------------------------------------------------

### Other variables

```{r}
other_plot

```

------------------------------------------------------------------------

### Support for Transgender Rights by Region



![](support east:west.png)

------------------------------------------------------------------------

### Highest Education Level Reached Per Country

```{r}
education_levels <- final_data %>%
  mutate(ISCED_Level = case_when(
    age_edu == 00 ~ "Still Studying",  # Separate category
    age_edu == 01 ~ "No Formal Education",  # No formal schooling
    age_edu == 98 | age_edu == 99 ~ "Refused / Don't Know",  # Separate category
    age_edu < 5  ~ "Pre-primary",
    age_edu >= 5 & age_edu <= 10  ~ "Primary",
    age_edu >= 11 & age_edu <= 14  ~ "Lower Secondary",
    age_edu >= 15 & age_edu <= 18  ~ "Upper Secondary",
    age_edu >= 16 & age_edu <= 19  ~ "Vocational",
    age_edu >= 19  ~ "Tertiary",
    TRUE ~ NA_character_
  ))

education_summary <- education_levels %>%
  group_by(country, ISCED_Level) %>%
  summarise(Count = n(), .groups = "drop") %>%
  arrange(country, desc(Count))

education_spending_summary <- education_summary %>%
  left_join(final_data %>%
              group_by(country) %>%
              summarise(
                Primary_Spending = mean(prim_exp, na.rm = TRUE),
                Lower_Secondary_Spending = mean(lose_exp, na.rm = TRUE),
                Upper_Secondary_Spending = mean(upse_exp, na.rm = TRUE),
                Vocational_Spending = mean(voc_exp, na.rm = TRUE),
                Tertiary_Spending = mean(ter_exp, na.rm = TRUE)
              ), by = "country")  

hchart(education_summary, "column", 
       hcaes(x = country, y = Count, group = ISCED_Level)) %>%
  hc_chart(
    type = "column",
    backgroundColor = list(
      linearGradient = list(x1 = 0, y1 = 0, x2 = 0, y2 = 1),
      stops = list(
        list(0, 'white'),    
        list(1, 'white')     
      )
    )
  ) %>%
  hc_plotOptions(column = list(stacking = "normal")) %>%  # Enable stacking
  hc_title(text = "Highest Education Level Reached Per Country (Stacked)", 
           style = list(color = "black", fontSize = "20px")) %>%
  hc_xAxis(title = list(text = "Country", style = list(color = "black")), 
           labels = list(style = list(color = "black"), rotation = -45)) %>%
  hc_yAxis(title = list(text = "Number of Respondents", style = list(color = "black")), 
           labels = list(style = list(color = "black")),
           max = 1050,
            tickInterval = 150) %>%
 hc_colors(c("#3498db", "#f39c12", "#e74c3c", "#9b59b6", "#2ecc71", "#34495e", "#1abc9c", "#d35400")) %>% 
   hc_legend(reversed = TRUE)%>%
  hc_tooltip(useHTML = TRUE, 
             pointFormat = "<b>{point.country}</b><br>
                           Education Level: {point.ISCED_Level}<br>
                           Respondents: {point.y}")

```

------------------------------------------------------------------------

### Distribution of responses to QC19 (by country & gender)

![](qc19 distribution.png)

------------------------------------------------------------------------

## Descriptive Analysis
### Country-Level

::: {.panel-tabset .nav-pills}
### GDP vs Education Spend
```{r}
edueco_data <- read_csv("data_cleaning_files/UNESCO Edu Country Data 2019/edueco_data.csv") 

# Prepare data
data_2019 <- edueco_data %>%
  drop_na(NY.GDP.MKTP.CD, SE.XPD.TOTL.GD.ZS, country) %>%
  mutate(GDP_trillions = NY.GDP.MKTP.CD / 1e12,  # Convert GDP to Trillions USD
         Total_Education_Spending = (NY.GDP.MKTP.CD * SE.XPD.TOTL.GD.ZS) / 100,
         Spending_Billions = Total_Education_Spending / 1e9,  # Convert Spending to Billions USD
         Education_Percent_GDP = round(SE.XPD.TOTL.GD.ZS, 2),  # Round % of GDP spent on education
         Spending_Category = cut(Spending_Billions, 
                                 breaks = c(-Inf, 20, 50, 100, Inf), 
                                 labels = c("Low (<20B)", "Medium (20B-50B)", 
                                            "High (50B-100B)", "Very High (>100B)")))

# Explicitly Define Colors for Categories
spending_colors <- c("#1E90FF",  # Bright Blue (Low <20B)
                     "#FFD700",  # Gold (Medium 20B-50B)
                     "#FF4500",  # Red-Orange (High 50B-100B)
                     "#8B0000")  # Dark Red (Very High >100B)

# Create the chart with gradient background and y-axis starting at 0
hchart(data_2019, "bubble", hcaes(x = GDP_trillions, y = Spending_Billions, 
                                  size = Spending_Billions, group = Spending_Category, 
                                  name = country)) %>%
  hc_chart(
    backgroundColor = list(
      linearGradient = list(x1 = 0, y1 = 0, x2 = 0, y2 = 1),
      stops = list(
        list(0, 'white'),    # Dark blue at the top
        list(1, 'white')     # Near black at the bottom
      )
    )
  ) %>%
  hc_title(text = "Education Spending Patterns in Europe (2019)", 
           style = list(color = "black", fontSize = "20px")) %>%
  hc_subtitle(text = "Comparing GDP and Total Education Spending", 
              style = list(color = "black", fontSize = "14px")) %>%
  hc_xAxis(title = list(text = "GDP (Trillions USD)", style = list(color = "black")),
           labels = list(style = list(color = "black")),
           gridLineColor = "#444444") %>%
  hc_yAxis(title = list(text = "Total Education Spending (Billions USD)", 
                        style = list(color = "black")),
           labels = list(style = list(color = "black")),
           gridLineColor = "#444444",
           min = 0) %>%  # Set y-axis to start at 0
  hc_legend(layout = "horizontal", align = "right", verticalAlign = "bottom",
            itemStyle = list(color = "black")) %>%
  # Apply Colors Using hc_colors() 
  hc_colors(spending_colors) %>%
  hc_tooltip(useHTML = TRUE, 
             backgroundColor = "white",  # White background
             borderColor = "black",
             style = list(color = "black", fontSize = "14px"),  # Ensure all text is black
             formatter = JS("function() {
               return '<b>' + this.point.name + '</b><br>' +
                      '<b>GDP:</b> ' + Highcharts.numberFormat(this.x, 2) + 'T USD<br>' +
                      '<b>Education Spending:</b> ' + Highcharts.numberFormat(this.y, 2) + 'B USD<br>' +
                      '<b>% of GDP Spent on Education:</b> ' + Highcharts.numberFormat(this.point.Education_Percent_GDP, 2) + '%<br>' +
                      '<b>Category:</b> ' + this.series.name;
             }"))
```

### Spend Per Education Level
```{r}
# Load the data
economic_summary <- read_csv("data_cleaning_files/UNESCO Edu Country Data 2019/edueco_data.csv")

# First, create the summary data frame if it doesn't already exist
economic_summary_processed <- economic_summary %>%
  group_by(country) %>%
  summarise(
    edu_exp_pct = mean(SE.XPD.TOTL.GD.ZS, na.rm = TRUE),  # Total education expenditure
    preprim_exp = mean(`PrePrimary (XSPENDP.02.FDPUB.FNCUR)`, na.rm = TRUE),
    prim_exp = mean(`Primary (XSPENDP.1.FDPUB.FNCUR)`, na.rm = TRUE),
    lose_exp = mean(`LowerSecondary (XSPENDP.2.FDPUB.FNCUR)`, na.rm = TRUE),
    upse_exp = mean(`UpperSecondary (XSPENDP.2T3.FDPUB.FNCUR)`, na.rm = TRUE),
    ter_exp = mean(`Tertiary (XSPENDP.3.FDPUB.FNCUR)`, na.rm = TRUE),
    voc_exp = mean(`VocationalTraining (XSPENDP.4.FDPUB.FNCUR)`, na.rm = TRUE)
  )

# Then continue with your visualization code
edu_long <- economic_summary_processed %>%
  # Sort countries by total education expenditure (high to low)
  arrange(desc(edu_exp_pct)) %>%
  # Convert to long format
  pivot_longer(
    cols = c(preprim_exp, prim_exp, lose_exp, upse_exp, ter_exp, voc_exp),
    names_to = "level",
    values_to = "expenditure"
  ) %>%
  mutate(
    level = factor(level, 
                  levels = c("preprim_exp", "prim_exp", "lose_exp", 
                            "upse_exp", "ter_exp", "voc_exp"),
                  labels = c("Pre-Primary", "Primary", "Lower Secondary", 
                            "Upper Secondary", "Tertiary", "Vocational")),
    # Keep countries in consistent order
    country = factor(country, levels = unique(country))
  )

# Create lollipop chart
ggplot(edu_long, aes(x = expenditure, y = country)) +
  geom_segment(aes(x = 76, xend = expenditure, yend = country), 
               color = "gray70", linewidth = 0.6) +
  geom_point(aes(color = level), size = 3.5, alpha = 0.9) +
  facet_wrap(~ level, scales = "free_x", ncol = 3) +
  scale_color_brewer(palette = "Set2") +
  scale_x_continuous(limits = c(76, 100), breaks = seq(76, 100, 2)) +
  labs(
    title = "Education Expenditure by Level and Country",
    x = "Expenditure (%)",
    y = "",
    color = "Education Level"
  ) +
  theme_minimal() +
  theme(
    strip.background = element_rect(fill = "lightblue", color = "white"),
    strip.text = element_text(face = "bold", size = 11),
    panel.grid.minor = element_blank(),
    panel.grid.major.y = element_blank(),
    axis.text.y = element_text(size = 9),
    legend.position = "bottom",
    plot.title = element_text(face = "bold", size = 14)
  )
```
:::

## Health Variables 

```{r}
# Improved Gender-Affirming Healthcare Visualization in R with explicit category management
library(tidyverse)
library(readr)

# Read the data
# Read the data
trans_health <- read_csv("data_cleaning_files/trans_health_data.csv", 
                         show_col_types = FALSE)
trans_health <- trans_health[, -1]  # Drop first column using base R indexing

# Create a direct mapping of each service to its category and display name
service_metadata <- tribble(
  ~original_name,                    ~display_name,         ~category,
  "Breast augmentation",            "Breast Aug.",        "Feminizing Surgeries",
  "Orchiectomy",                    "Orchiectomy",        "Feminizing Surgeries",
  "Vaginoplasty",                   "Vaginoplasty",       "Feminizing Surgeries",
  "Facial Feminisation Surgery",    "Facial Feminisation","Feminizing Surgeries",
  "Tracheal shave",                 "Tracheal Shave",     "Feminizing Surgeries",
  
  "Hysterectomy",                   "Hysterectomy",       "Masculinizing Surgeries",
  "Ovariectomy (aka oopherectomy)", "Ovariectomy",        "Masculinizing Surgeries",
  "Mastectomy",                     "Mastectomy",         "Masculinizing Surgeries",
  "Metoidioplasty",                 "Metoidioplasty",     "Masculinizing Surgeries",
  "Phalloplasty",                   "Phalloplasty",       "Masculinizing Surgeries",
  
  "Psychological care",             "Psychological Care", "Mental Health",
  "Psychiatric care",               "Psychiatric Care",   "Mental Health",
  
  "Electrolysis / Laser Hair Removal", "Hair Removal",    "Other",
  "HRT (Oestrogen)",                "HRT (Oestrogen)",    "Other",
  "HRT (Testosterone)",             "HRT (Testosterone)", "Other",
  "Vocal training",                 "Vocal Training",     "Other"
)

# Calculate coverage score for each country
trans_health$coverage_score <- rowSums(trans_health[, -1] == 1, na.rm = TRUE) / 
                              (ncol(trans_health) - 1) * 100

# Sort countries by coverage score
trans_health <- trans_health %>%
  arrange(desc(coverage_score))

# Prepare data for visualization - convert to long format
health_data_long <- trans_health %>%
  pivot_longer(
    cols = -c(Country, coverage_score),
    names_to = "Service",
    values_to = "Status"
  )

# Join the category and display name information
health_data_long <- health_data_long %>%
  left_join(service_metadata, by = c("Service" = "original_name"))

# Set explicit order for categories
category_order <- c("Feminizing Surgeries", "Masculinizing Surgeries", "Mental Health", 
                   "Other Procedures", "Other")

# Set explicit order for services within categories
service_order <- service_metadata %>%
  arrange(factor(category, levels = category_order)) %>%
  pull(display_name)

# Convert to factors with specific order
health_data_long <- health_data_long %>%
  mutate(
    category = factor(category, levels = category_order),
    display_name = factor(display_name, levels = service_order),
    Status_Label = factor(Status, levels = c(1, 2, 3),
                         labels = c("Available", "Not Available", "Not Enough Information"))
  )

# Create the main heatmap visualization
ggplot(health_data_long, 
       aes(y = factor(Country, levels = rev(trans_health$Country)), 
           x = display_name, 
           fill = Status_Label)) +
  geom_tile(color = "white", linewidth = 0.2) +
  scale_fill_manual(values = c("Available" = "#2166AC", 
                               "Not Available" = "#B2182B", 
                               "Not Enough Information" = "gray80"),
                    name = "Availability") +
  theme_minimal() +
  labs(title = "Availability of Gender-Affirming Healthcare by Country",
       x = "Healthcare Service",
       y = "") +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 8),
    axis.text.y = element_text(size = 9),
    plot.title = element_text(size = 14, face = "bold"),
    plot.subtitle = element_text(size = 10),
    legend.position = "bottom",
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.border = element_rect(fill = NA, color = "gray80", linewidth = 0.5)
  ) +
  # Create facets by category with explicit ordering
  facet_grid(. ~ category, scales = "free_x", space = "free_x")
```

### Legal Variables
```{r}
# Load necessary libraries
library(tidyverse)
library(readr)
library(highcharter)

# Load the dataset
ilga_data <- read_csv("data_cleaning_files/ilga_data.csv")

# List of countries to include
filtered_countries <- c(
  "Belgium", "Denmark", "Germany", "Greece", "Spain", "France", 
  "Ireland", "Italy", "Luxembourg", "Netherlands", "Portugal", 
  "United Kingdom", "Austria", "Sweden", "Finland", "Cyprus", 
  "Czech Republic", "Estonia", "Hungary", "Latvia", "Lithuania", 
  "Malta", "Poland", "Slovakia", "Slovenia", "Bulgaria", "Romania", "Croatia"
)

# Filter the dataset to include only the specified countries
ilga_filtered <- ilga_data %>%
  filter(Country %in% filtered_countries)

# Clean and shorten measure names for better readability
measure_mapping <- c(
  "No legal framework making legal gender recognition impossible" = "Legal framework exists",
  "Existence of legal measures" = "Legal measures exist",
  "Existence of administrative procedures" = "Administrative procedures exist",
  "Name change" = "Name change allowed",
  "No age restriction, Name change" = "No age limit for name change",
  "Self-determination" = "Self-determination model",
  "Non-binary recognition" = "Non-binary recognition",
  "No 'Gender Identity Disorder' diagnosis/psychological opinion required" = "No diagnosis required",
  "No compulsory medical intervention required" = "No medical intervention required",
  "No compulsory surgical intervention required" = "No surgical intervention required",
  "No compulsory sterilisation required" = "No sterilization required",
  "No compulsory divorce required" = "No divorce required",
  "No age restriction" = "No age restriction",
  "Legal gender recognition procedures exist for minors" = "Recognition for minors",
  "Depathologisation" = "Depathologisation"
)

# Get the countries for each legal measure
countries_by_measure <- ilga_filtered %>%
  pivot_longer(cols = -Country, names_to = "Legal_Measure", values_to = "Presence") %>%
  mutate(Legal_Measure = case_match(
    Legal_Measure,
    "No legal framework making legal gender recognition impossible" ~ "Legal framework exists",
    "Existence of legal measures" ~ "Legal measures exist",
    "Existence of administrative procedures" ~ "Administrative procedures exist",
    "Name change" ~ "Name change allowed",
    "No age restriction, Name change" ~ "No age limit for name change",
    "Self-determination" ~ "Self-determination model",
    "Non-binary recognition" ~ "Non-binary recognition",
    "No 'Gender Identity Disorder' diagnosis/psychological opinion required" ~ "No diagnosis required",
    "No compulsory medical intervention required" ~ "No medical intervention required",
    "No compulsory surgical intervention required" ~ "No surgical intervention required",
    "No compulsory sterilisation required" ~ "No sterilization required",
    "No compulsory divorce required" ~ "No divorce required",
    "No age restriction" ~ "No age restriction",
    "Legal gender recognition procedures exist for minors" ~ "Recognition for minors",
    "Depathologisation" ~ "Depathologisation",
    .default = as.character(Legal_Measure)
  )) %>%
  filter(Presence == 1) %>%
  group_by(Legal_Measure) %>%
  summarise(
    # Create a bullet list with one country per line
    Countries = paste("<li>", sort(Country), "</li>", collapse = ""),
    Count = n()
  ) %>%
  arrange(desc(Count))

# Transform the data to long format with shortened names for the chart
df_long <- countries_by_measure %>%
  mutate(Percentage = Count / length(filtered_countries) * 100) %>%
  # Create a list to store country information for tooltips
  mutate(country_list = Countries)

# Create a simple highcharter bar chart with enhanced tooltips
hc <- highchart() %>%
  hc_chart(
    type = "bar",
    style = list(fontFamily = "Segoe UI, Arial, sans-serif"),
    backgroundColor = "#FFFFFF"
  ) %>%
  hc_title(
    text = "ILGA Legal Gender Recognition Frameworks Across Selected EU Countries",
    style = list(fontSize = "18px", fontWeight = "bold") 
  ) %>%
  hc_xAxis(
    categories = df_long$Legal_Measure,
    labels = list(style = list(fontSize = "12px"))
  ) %>%
  hc_yAxis(
    title = list(text = "Number of Countries", style = list(fontSize = "13px")),
    max = length(filtered_countries),
    gridLineWidth = 0.5,
    gridLineDashStyle = "Dot"
  ) %>%
  hc_add_series(
    name = "Countries",
    data = lapply(1:nrow(df_long), function(i) {
      list(
        y = df_long$Count[i],
        countries = df_long$country_list[i],
        percentage = df_long$Percentage[i],
        color = "#219EBC"  # Set all bars to the requested color
      )
    })
  ) %>%
  hc_plotOptions(
    bar = list(
      dataLabels = list(
        enabled = TRUE,
        format = "{y}",
        style = list(fontWeight = "bold")
      ),
      borderRadius = 3,
      pointWidth = 18
    )
  ) %>%
  # Custom tooltip showing countries in a vertical list
  hc_tooltip(
    useHTML = TRUE,
    headerFormat = "<div style='font-size: 14px; font-weight: bold; margin-bottom: 8px;'>{point.key}</div>",
    pointFormatter = JS("function() {
      return '<div style=\"width: 220px;\">' +
             '<div style=\"margin: 5px 0;\"><b>' + this.y + '</b> countries (' + 
             Math.round(this.percentage) + '%)</div>' +
             '<div style=\"margin-top: 10px; max-height: 200px; overflow-y: auto;\">' +
             '<b>Countries:</b>' +
             '<ul style=\"margin-top: 5px; padding-left: 20px;\">' + 
             this.countries + 
             '</ul></div>' +
             '</div>';
    }"),
    backgroundColor = "rgba(255, 255, 255, 0.98)",
    borderWidth = 1,
    borderColor = "black",
    padding = 10,
    style = list(fontSize = "12px")
  ) %>%
  hc_legend(enabled = FALSE) %>%  # Disable legend since all bars are the same color
  hc_credits(
    enabled = TRUE,
    text = "Source: ILGA Europe",
    style = list(fontSize = "10px")
  )

# Display the chart
hc
```

------------------------------------------------------------------------

## Multicolinearity -Ekin

```{r, echo=FALSE, message=FALSE, warning=FALSE}

final_data <- read_csv("final_data.csv")

# Convert to an ordered factor
final_data$transgender_civil_dc1 <- factor(final_data$transgender_civil_dc, 
                                          levels = c(2, 3, 1), 
                                          labels = c("Oppose", "Don't Know", "Support"),
                                          ordered = TRUE)

religion_labels <- c(
  "1" = "Catholic",
  "2" = "Orthodox Christian",
  "3" = "Protestant",
  "4" = "Other Christian",
  "5" = "Jewish",
  "6" = "Muslim - Shia",
  "7" = "Muslim - Sunni",
  "8" = "Other Muslim",
  "9" = "Sikh",
  "10" = "Buddhist",
  "11" = "Hindu",
  "12" = "Atheist",
  "13" = "Non believer / Agnostic",
  "14" = "Other",
  "15" = "Refusal",
  "16" = "Don't Know"
)

final_data <- final_data %>%
  filter(religion %in% names(religion_labels))

# Convert religion variable to factor with specific labels
final_data$religion1 <- factor(final_data$religion, 
                              levels = names(religion_labels), 
                              labels = religion_labels)


final_data$ideo1 <- scale(final_data$ideo)  

control_settings <- glmerControl(optimizer = "bobyqa", optCtrl = list(maxfun = 100000))

model1<- glmer(transgender_civil_dc1 ~ gender + religion1 + ideo + 
                  (1 | iso3c), 
                data = final_data, 
                family = binomial, 
                control = control_settings)



plot_model(model1, type = "est", show.values = TRUE, title = "Effect of Variables on Support for Transgender Rights")
```

------------------------------------------------------------------------

```{r, echo=FALSE, message=FALSE, warning=FALSE}

# Model with a quadratic term for gender
final_data$gender_squared <- final_data$gender^2

model2 <- glmer(transgender_civil_dc1 ~ gender + gender_squared + religion1 + ideo1 + (1 | iso3c),
                data = final_data,
                family = binomial,
                control = glmerControl(optimizer = "bobyqa"))

# Summary of the model
summary(model2, correlation = TRUE)

# Get covariance matrix for the fixed effects coefficients
vcov(model2)
```

------------------------------------------------------------------------

```{r, echo=FALSE, message=FALSE, warning=FALSE}
model_multinomial <- multinom(transgender_civil_dc1 ~ gender + religion1 + ideo1,
                              data = final_data)

summary(model_multinomial)
```

------------------------------------------------------------------------

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Define training control for cross-validation (10-fold cross-validation)
train_control <- trainControl(method = "cv", number = 10)

# Train the model using multinomial logistic regression with cross-validation
cv_model <- train(transgender_civil_dc1 ~ gender + religion1 + ideo1,
                  data = final_data,
                  method = "multinom",  # Multinomial logistic regression
                  trControl = train_control)


# Confusion matrix for the cross-validation model
confusionMatrix(cv_model)
```

------------------------------------------------------------------------

```{r, echo=FALSE, message=FALSE, warning=FALSE}

model_eco <- lm(transgender_civil_dc ~ gdp+ edu_exp_pct +preprim_exp + prim_exp +  lose_exp +upse_exp+  ter_exp+ voc_exp,
                    data = final_data)


print(model_eco)

```

------------------------------------------------------------------------

```{r, echo=FALSE, message=FALSE, warning=FALSE}
# Correcting the select() function by adding quotes around each variable name
cor_data <- final_data %>%
  dplyr::select("gender", "religion", "ideo", "gdp", "edu_exp_pct", "preprim_exp", "prim_exp", "lose_exp", 
         "upse_exp", "ter_exp", "voc_exp", "psychological.care", "psychiatric.care", "nolger", 
         "exist_lgme", "exist_adm", "name_change", "self_det")

# Compute the correlation matrix
cor_matrix <- cor(cor_data, use = "complete.obs")

```

```{r}
corrplot(cor_matrix)

```

------------------------------------------------------------------------

## Prediction Models- Gina

what models were used and why + their results

feature importance from random forest

------------------------------------------------------------------------

## Model Comparison 

```{r, fig.align='center'}
knitr::include_graphics("model_comparison.png")
```

------------------------------------------------------------------------

## Conclusion

```{r}
merged_data <- read_csv ("merged_data.csv")

# Define country codes and sample values
country_codes <- data.frame(
  country = c("Belgium", "Denmark", "Greece", "Spain", "Finland", "France", "Ireland", "Italy",
              "Luxembourg", "Netherlands", "Austria", "Portugal", "Sweden", "Bulgaria", "Cyprus",
              "Czech Republic", "Estonia", "Hungary", "Latvia", "Lithuania", "Malta", "Poland",
              "Romania", "Slovenia", "Croatia", "Germany"),
  iso3c = c("BEL", "DNK", "GRC", "ESP", "FIN", "FRA", "IRL", "ITA", "LUX", "NLD", 
           "AUT", "PRT", "SWE", "BGR", "CYP", "CZE", "EST", "HUN", "LVA", "LTU", 
           "MLT", "POL", "ROU", "SVN", "HRV", "DEU") # ISO-3 Codes
)


percentage <- final_data %>%
  group_by(iso3c) |>
  count(transgender_civil_dc) %>%  # Count occurrences of each unique value
  mutate(percentage = (n / sum(n)) * 100) 

percentage <- percentage%>%
  left_join(country_codes, by = "iso3c")

library(dplyr)
library(highcharter)

# Aggregate data and handle missing values correctly
aggregated_data <- percentage %>%
  group_by(iso3c) %>%
  summarise(
    country = country_codes$country[match(iso3c, country_codes$iso3c)],  # Add country name
    tooltip_text = paste0(
      "<b>", country, "</b><br>",
      "<b>Yes:</b> ", round(sum(percentage[transgender_civil_dc == 1], na.rm = TRUE), 1), "%<br>",
      "<b>No:</b> ", round(sum(percentage[transgender_civil_dc == 2], na.rm = TRUE), 1), "%<br>",
      "<b>DK:</b> ", round(sum(percentage[transgender_civil_dc == 3], na.rm = TRUE), 1), "%"
    ),
    dominant_dc = transgender_civil_dc[which.max(percentage)]  # Get the dominant category
  ) %>%
  ungroup()

# Generate Highcharts map
hcmap("custom/europe", 
      data = aggregated_data,
      name = "Transgender Civil DC Levels",
      joinBy = c("iso-a3", "iso3c"),  
      value = "dominant_dc",
      dataLabels = list(enabled = TRUE, format = '{point.name}'),
      borderColor = "#ffffff"
) %>%
  hc_colorAxis(dataClasses = list(
    list(from = 1, to = 1, color = "#007bff", name = "Yes"),      # Blue for Yes
    list(from = 2, to = 2, color = "#ffd700", name = "No"),      # Yellow for No
    list(from = 3, to = 3, color = "#4caf50", name = "DK")       # Green for DK
  )) %>%
  hc_tooltip(
    useHTML = TRUE,
    headerFormat = "<span style='font-size:16px; font-weight:bold'>{point.name}</span><br>",
    pointFormat = "<div style='width:260px; font-size:14px; line-height:1.5'>{point.tooltip_text}</div>",
    borderWidth = 2,
    borderColor = "#333",
    backgroundColor = "rgba(255, 255, 255, 0.95)",
    style = list(fontSize = "14px", padding = "12px")
  ) %>%
  hc_chart(
    width = 550,  
    height = 550, 
    map= list(
      zoom = 0.3,  
      center = list(latitude = 50, longitude = 10)  
    )
  ) %>%
  hc_mapNavigation(
    enabled = TRUE,  
    enableButtons = TRUE,  
    enableMouseWheelZoom = FALSE  
  ) %>%
  hc_title(text = "Transgender Civil DC Support Levels in Europe")

```
