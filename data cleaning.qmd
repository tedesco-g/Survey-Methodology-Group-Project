---
title: "assignment"
format: html
editor: visual
---

```{r}
library(haven)
library(tidyverse)
library(naniar)
library(visdat)
library(mice)
library(GGally)
library(corrplot)
library(randomForest)
library(ggcorrplot)
library(reshape2)
library(readr)
```

```{r}
data <- read_dta("ZA7575.dta")


edueco_data <- read_csv("UNESCO Edu Country Data 2019/edueco_data.csv")

merged_data <- data %>%
  inner_join(edueco_data, by = c("isocntry" = "iso2c"))
```

```{r}

merged_data<- merged_data %>%
  mutate(across(where(is.labelled), as.numeric))

merged_data <- merged_data |> 
 select(where(is.numeric))|>
  select(-c(edition,studyno1, studyno2,survey, caseid, uniqid))


```

```{r}

total_missing <- sum(is.na(merged_data))
cat("Total Missing:", total_missing, "\n")

missing_per_column <- colSums(is.na(merged_data))

missing_df <- data.frame(Variable = names(missing_per_column), 
                         Missing_Count = missing_per_column, 
                         Missing_Percentage = (missing_per_column / nrow(data)) * 100)

missing_df <- missing_df[order(-missing_df$Missing_Percentage), ]
print(missing_df)


high_missing <- missing_df[missing_df$Missing_Percentage > 50, ]
print(high_missing)
```

```{r}

missing_per_row <- rowSums(is.na(merged_data))

head(sort(missing_per_row, decreasing = TRUE), 10)



```

```{r}

missing_per_column <- sort(missing_per_column, decreasing = TRUE)

print(missing_per_column[1:10])

```

```{r}
high_missing_vars <- names(missing_per_column[missing_per_column >50])

merged_data <- merged_data[, !(names(merged_data) %in% high_missing_vars)]

constant_vars <- names(Filter(function(x) length(unique(x)) == 1, data))
merged_data <- merged_data[, !(names(merged_data) %in% constant_vars)]


```

```{r}

library(caret)
# Select only numeric variables
numeric_data <- merged_data[, sapply(merged_data, is.numeric)]

# Identify and remove constant variables (zero standard deviation)
zero_sd_vars <- sapply(numeric_data, function(x) sd(x, na.rm = TRUE) == 0)
numeric_data <- numeric_data[, !zero_sd_vars]

# Identify and remove columns with missing values (alternatively, you can impute them)
numeric_data <- numeric_data[, colSums(is.na(numeric_data)) == 0]

# Compute the correlation matrix
cor_matrix <- cor(numeric_data, use = "pairwise.complete.obs")

print(cor_matrix)

high_cor <- findCorrelation(cor_matrix, cutoff = 0.90) 

print(high_cor)

filtered_data <- numeric_data[, -high_cor]

head(filtered_data)

```

```{r}

 
library(mice)

# List of different imputation methods to test
method_list <- c("pmm", "logreg", "polyreg", "rf", "cart")

# Store the imputed datasets
imputed_datasets <- list()

for (method in method_list) {
  cat("\nRunning:", method, "...\n")
  
  # Perform imputation using the selected method
  imputed_datasets[[method]] <- mice(filtered_data, method = method, m = 5, maxit = 5, seed = 123)
}


```

```{r}

data_comparison <- data.frame(
  Original = as.numeric(filtered_data[["qc19"]]),  # Original before imputation
  PMM = as.numeric(complete(imputed_datasets[["pmm"]])[["qc19"]]),  
  RF = as.numeric(complete(imputed_datasets[["rf"]])[["qc19"]]),  
  CART = as.numeric(complete(imputed_datasets[["cart"]])[["qc19"]]),  
  LogReg = as.numeric(complete(imputed_datasets[["logreg"]])[["qc19"]]),  
  PolyReg = as.numeric(complete(imputed_datasets[["polyreg"]])[["qc19"]])  
)



# Reshape data into long format for ggplot
plot_data <- melt(data_comparison, variable.name = "Method", value.name = "qc19_values")

# Plot using ggplot
ggplot(plot_data, aes(x = qc19_values, fill = Method)) +
  geom_histogram(binwidth = 1, alpha = 0.6, position = "identity") +
  facet_wrap(~Method, scales = "free_y") +  # Separate plots for each method
  labs(title = "Comparison of Imputation Methods for qc19 (Including Original Data)",
       x = "qc19 Values", y = "Frequency") +
  theme_minimal()


```

```{r}
numeric_vars <- filtered_data %>% select(where(is.numeric))

cor_matrix <- cor(numeric_vars, use = "complete.obs")

qc19_correlations <- sort(cor_matrix["qc19", ], decreasing = TRUE)

print(qc19_correlations)


top_correlations <- sort(qc19_correlations, decreasing = TRUE)


top_20 <- head(top_correlations, 20)



ggplot(data.frame(Variable = names(top_20), Correlation = top_20), aes(x = reorder(Variable, Correlation), y = Correlation)) +
  geom_bar(stat = "identity", fill = "steelblue") +
  coord_flip() +
  labs(title = "High Correlation with qc19 ", x = "Variable", y = "Correlation") +
  theme_minimal()

top_vars <- c("qc20", "qc15_3", "qc15_2","qc15_1","qc17_3", "qc17_5") 

for (var in top_vars) {
  print(ggplot(data , aes_string(x = var)) +
    geom_histogram(fill = "blue", bins = 30) +
    labs(title = paste("Distrubition:", var), x = var, y = "Frequency") +
    theme_minimal())
}


library(haven) 
data<- data %>%
  mutate(qc19 = as_factor(qc19))


```

```{r}

data <- data %>%
  mutate(qc19 = as_factor(qc19),
         gender = as_factor(d10))

qc19_country_gender_dist <- data%>%
  group_by(isocntry, gender, qc19) %>%
  summarise(count = n(), .groups = 'drop')


ggplot(qc19_country_gender_dist, aes(x = qc19, y = count, fill = gender)) +
  geom_col(position = "dodge", width = 0.7) +  # Dodge to separate gender groups
  facet_wrap(~isocntry, scales = "free_y") +  # Facet by country
  scale_fill_manual(values = c("Man" = "#3C8BFA", "Woman" = "#663CFA")) +  # Gender colors
  labs(title = "Distribution of qc19 Responses by Country and Gender",
       x = "Response Type", y = "Response Count", fill = "Gender") +
  theme_minimal(base_size = 10) +
  theme(
    axis.text.x = element_text(angle = 45, hjust = 1, size = 6),  
    legend.position = "bottom",
        legend.text = element_text(size = 8),
     legend.title = element_text(size = 9, face = "bold"),
      legend.key.size = unit(0.4, "cm"),
    panel.grid.major.x = element_blank(),
    strip.text = element_text(size = 8, face = "bold"),  # Small facet title
    strip.background = element_rect(fill = "gray90", color = "black") +
      annotate("text", x = 2, y = max(qc19_country_gender_dist$count) + 20, 
           label = "Response Type", size = 5, fontface = "bold", vjust = -1.3)  # Add "Response Type"# Facet label style
  )

```

```{r}
ggplot(qc19_country_gender_dist, aes(x = gender, y = count, fill = gender)) +
  geom_boxplot() +
  facet_wrap(~qc19) +  
  scale_fill_manual(values = c("Man" = "#3C8BFA", "Woman" = "#663CFA")) +
  labs(title = "Distribution of qc19 Responses by Gender",
       x = "Gender", y = "Response Count") +
  theme_minimal(base_size = 14) +
  theme(legend.position = "none")


```

```{r}
data$isocntry <- reorder(data$isocntry, as.numeric(data$qc19), mean)  # Order by mean qc19 response

ggplot(data, aes(x = isocntry, y = as.numeric(qc19))) +
  geom_violin(width = 0.9, fill = "lightblue", color = "black") +  # Make violins wider
  geom_boxplot(width = 0.2, outlier.shape = NA) +  # Add boxplot overlay
  stat_summary(fun = mean, geom = "point", color = "red", size = 2) +  # Highlight means
  scale_y_continuous(breaks = c(1, 2, 3), labels = c("Yes", "No", "DK")) +
  labs(title = "Distribution of qc19 Responses by Country (Ordered by Mean)",
     x = "Country", y = "qc19 Response Score") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1, size = 10),  # Adjust font size
      plot.title = element_text(size = 14, face = "bold")) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))

```
